{"stats":{"asserts":198,"passes":114,"failures":84},"asserts":[{"number":1,"comment":"modes » absolute » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/absolute.test.js:12:5"]}},{"number":2,"comment":"modes » absolute » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/absolute.test.js:16:5"]}},{"number":3,"comment":"modes » absolute » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute » afterExecute() should return true","ok":true,"extra":{}},{"number":4,"comment":"modes » absolute » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/absolute.test.js:24:5"]}},{"number":5,"comment":"modes » implied » beforeEach hook for afterExecute() should return true","name":"modes » implied » beforeExecute() should return true","ok":true,"extra":{}},{"number":6,"comment":"modes » implied » beforeEach hook for afterExecute() should return true","name":"modes » implied » afterExecute() should return true","ok":true,"extra":{}},{"number":7,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_x » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/absolute_x.test.js:12:5"]}},{"number":8,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_x » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/absolute_x.test.js:16:5"]}},{"number":9,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_x » afterExecute() should return true","ok":true,"extra":{}},{"number":10,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_x » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/absolute_x.test.js:24:5"]}},{"number":11,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_y » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/absolute_y.test.js:12:5"]}},{"number":12,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_y » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/absolute_y.test.js:16:5"]}},{"number":13,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_y » afterExecute() should return true","ok":true,"extra":{}},{"number":14,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » absolute_y » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/absolute_y.test.js:24:5"]}},{"number":15,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/indirect.test.js:12:5"]}},{"number":16,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/indirect.test.js:16:5"]}},{"number":17,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect » afterExecute() should return true","ok":true,"extra":{}},{"number":18,"comment":"modes » indirect » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/indirect.test.js:24:5"]}},{"number":19,"comment":"modes » accumulator » beforeEach hook for afterExecute() should load the ALU into the accumulator","name":"modes » accumulator » beforeExecute() should return true","ok":true,"extra":{}},{"number":20,"comment":"modes » accumulator » beforeEach hook for afterExecute() should load the ALU into the accumulator","name":"modes » accumulator » beforeExecute() should load the accumulator into the ALU","ok":true,"extra":{}},{"number":21,"comment":"modes » accumulator » beforeEach hook for afterExecute() should load the ALU into the accumulator","name":"modes » accumulator » afterExecute() should return true","ok":true,"extra":{}},{"number":22,"comment":"modes » accumulator » beforeEach hook for afterExecute() should load the ALU into the accumulator","name":"modes » accumulator » afterExecute() should load the ALU into the accumulator","ok":true,"extra":{}},{"number":23,"comment":"modes » immediate » beforeEach hook for afterExecute() should return true","name":"modes » immediate » beforeExecute() should return true","ok":true,"extra":{}},{"number":24,"comment":"modes » immediate » beforeEach hook for afterExecute() should return true","name":"modes » immediate » beforeExecute() should load next byte of program counter into ALU","ok":true,"extra":{}},{"number":25,"comment":"modes » immediate » beforeEach hook for afterExecute() should return true","name":"modes » immediate » beforeExecute() should increment the PC","ok":true,"extra":{}},{"number":26,"comment":"modes » immediate » beforeEach hook for afterExecute() should return true","name":"modes » immediate » afterExecute() should return true","ok":true,"extra":{}},{"number":27,"comment":"modes » indirect_x » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect_x » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/indirect_x.test.js:12:5"]}},{"number":28,"comment":"modes » indirect_x » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect_x » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/indirect_x.test.js:16:5"]}},{"number":29,"comment":"modes » indirect_x » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect_x » afterExecute() should return true","ok":true,"extra":{}},{"number":30,"comment":"modes » indirect_x » beforeEach hook for afterExecute() should prime register.b","name":"modes » indirect_x » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/indirect_x.test.js:24:5"]}},{"number":31,"comment":"modes » relative » beforeEach hook for afterExecute() should prime register.b","name":"modes » relative » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/relative.test.js:12:5"]}},{"number":32,"comment":"modes » relative » beforeEach hook for afterExecute() should prime register.b","name":"modes » relative » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/relative.test.js:16:5"]}},{"number":33,"comment":"modes » relative » beforeEach hook for afterExecute() should prime register.b","name":"modes » relative » afterExecute() should return true","ok":true,"extra":{}},{"number":34,"comment":"modes » relative » beforeEach hook for afterExecute() should prime register.b","name":"modes » relative » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/relative.test.js:24:5"]}},{"number":35,"comment":"modes » zero_page_x » beforeEach hook for beforeExecute() should return true","name":"modes » indirect_y » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/indirect_y.test.js:12:5"]}},{"number":36,"comment":"modes » zero_page_x » beforeEach hook for beforeExecute() should return true","name":"modes » indirect_y » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/indirect_y.test.js:16:5"]}},{"number":37,"comment":"modes » zero_page_x » beforeEach hook for beforeExecute() should return true","name":"modes » indirect_y » afterExecute() should return true","ok":true,"extra":{}},{"number":38,"comment":"modes » zero_page_x » beforeEach hook for beforeExecute() should return true","name":"modes » indirect_y » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/indirect_y.test.js:24:5"]}},{"number":39,"comment":"modes » zero_page » beforeEach hook for afterExecute() should return true","name":"modes » zero_page_x » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/zero_page_x.test.js:12:5"]}},{"number":40,"comment":"modes » zero_page » beforeEach hook for afterExecute() should return true","name":"modes » zero_page_x » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/zero_page_x.test.js:16:5"]}},{"number":41,"comment":"modes » zero_page » beforeEach hook for afterExecute() should return true","name":"modes » zero_page_x » afterExecute() should return true","ok":true,"extra":{}},{"number":42,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page_x » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/zero_page_x.test.js:24:5"]}},{"number":43,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/zero_page.test.js:12:5"]}},{"number":44,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/zero_page.test.js:16:5"]}},{"number":45,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page » afterExecute() should return true","ok":true,"extra":{}},{"number":46,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/zero_page.test.js:24:5"]}},{"number":47,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page_y » beforeExecute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- undefined","+ true"],"at":["test/nellie/mos6502/modes/zero_page_y.test.js:12:5"]}},{"number":48,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page_y » beforeExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/zero_page_y.test.js:16:5"]}},{"number":49,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page_y » afterExecute() should return true","ok":true,"extra":{}},{"number":50,"comment":"modes » zero_page » beforeEach hook for afterExecute() should prime register.b","name":"modes » zero_page_y » afterExecute() should prime register.b","ok":false,"extra":{"name":["AssertionError"],"message":["Test failed via `t.fail()`","assertion: fail"],"at":["test/nellie/mos6502/modes/zero_page_y.test.js:24:5"]}},{"number":51,"comment":"operations » ASL » beforeEach hook for execute() should return true","name":"operations » ASL » execute() should return true","ok":true,"extra":{}},{"number":52,"comment":"operations » ADC » beforeEach hook for execute() should return true","name":"operations » AND » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/AND.test.js:13:5"]}},{"number":53,"comment":"operations » ADC » beforeEach hook for execute() should return true","name":"operations » ADC » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/ADC.test.js:13:5"]}},{"number":54,"comment":"operations » BCC » beforeEach hook for execute() should return true","name":"operations » BCC » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BCC.test.js:13:5"]}},{"number":55,"comment":"operations » BEQ » beforeEach hook for execute() should return true","name":"operations » BCS » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BCS.test.js:13:5"]}},{"number":56,"comment":"operations » BMI » beforeEach hook for execute() should return true","name":"operations » BEQ » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BEQ.test.js:13:5"]}},{"number":57,"comment":"operations » BIT » beforeEach hook for execute() should return true","name":"operations » BMI » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BMI.test.js:13:5"]}},{"number":58,"comment":"operations » BIT » beforeEach hook for execute() should return true","name":"operations » BIT » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BIT.test.js:13:5"]}},{"number":59,"comment":"operations » BNE » beforeEach hook for execute() should return true","name":"operations » BNE » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BNE.test.js:13:5"]}},{"number":60,"comment":"operations » BPL » beforeEach hook for execute() should return true","name":"operations » BPL » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BPL.test.js:13:5"]}},{"number":61,"comment":"operations » BRK » beforeEach hook for execute() should return true","name":"operations » BRK » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BRK.test.js:13:5"]}},{"number":62,"comment":"operations » BVC » beforeEach hook for execute() should return true","name":"operations » BVC » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BVC.test.js:13:5"]}},{"number":63,"comment":"operations » CLC » beforeEach hook for execute() should return true","name":"operations » CLC » execute() should return true","ok":true,"extra":{}},{"number":64,"comment":"operations » BVS » beforeEach hook for execute() should return true","name":"operations » BVS » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/BVS.test.js:13:5"]}},{"number":65,"comment":"operations » CLD » beforeEach hook for execute() should return true","name":"operations » CLD » execute() should return true","ok":true,"extra":{}},{"number":66,"comment":"operations » CLI » beforeEach hook for execute() should return true","name":"operations » CLI » execute() should return true","ok":true,"extra":{}},{"number":67,"comment":"operations » CLV » beforeEach hook for execute() should return true","name":"operations » CLV » execute() should return true","ok":true,"extra":{}},{"number":68,"comment":"operations » CMP » beforeEach hook for execute() should return true","name":"operations » CMP » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/CMP.test.js:13:5"]}},{"number":69,"comment":"operations » CPX » beforeEach hook for execute() should return true","name":"operations » CPX » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/CPX.test.js:13:5"]}},{"number":70,"comment":"operations » CPY » beforeEach hook for execute() should return true","name":"operations » DEC » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/DEC.test.js:13:5"]}},{"number":71,"comment":"operations » DEX » beforeEach hook for execute() should return true","name":"operations » DEX » execute() should return true","ok":true,"extra":{}},{"number":72,"comment":"operations » DEX » beforeEach hook for execute() should return true","name":"operations » CPY » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/CPY.test.js:13:5"]}},{"number":73,"comment":"operations » DEY » beforeEach hook for execute() should return true","name":"operations » DEY » execute() should return true","ok":true,"extra":{}},{"number":74,"comment":"operations » EOR » beforeEach hook for execute() should return true","name":"operations » EOR » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/EOR.test.js:13:5"]}},{"number":75,"comment":"operations » INC » beforeEach hook for execute() should return true","name":"operations » INC » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/INC.test.js:13:5"]}},{"number":76,"comment":"operations » INX » beforeEach hook for execute() should return true","name":"operations » INX » execute() should return true","ok":true,"extra":{}},{"number":77,"comment":"operations » INY » beforeEach hook for execute() should return true","name":"operations » INY » execute() should return true","ok":true,"extra":{}},{"number":78,"comment":"operations » JMP » beforeEach hook for execute() should return true","name":"operations » JMP » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/JMP.test.js:13:5"]}},{"number":79,"comment":"operations » JSR » beforeEach hook for execute() should return true","name":"operations » JSR » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/JSR.test.js:13:5"]}},{"number":80,"comment":"operations » JSR » beforeEach hook for execute() should return true","name":"operations » LDA » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/LDA.test.js:13:5"]}},{"number":81,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » execute() should return true","ok":true,"extra":{}},{"number":82,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » execute() should load Y","ok":true,"extra":{}},{"number":83,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » execute() should set N flag to 0","ok":true,"extra":{}},{"number":84,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » execute() should set N flag to 1","ok":true,"extra":{}},{"number":85,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":86,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":87,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » run() ABSOLUTE_Y mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LDX 0xbe. beforeExecute() returned undefined,","}"]}},{"number":88,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » run() ABSOLUTE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LDX 0xae. beforeExecute() returned undefined,","}"]}},{"number":89,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » run() IMMEDIATE mode should return this","ok":true,"extra":{}},{"number":90,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » run() IMMEDIATE mode should load Y from PC","ok":true,"extra":{}},{"number":91,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » run() ZERO_PAGE_Y mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LDX 0xb6. beforeExecute() returned undefined,","}"]}},{"number":92,"comment":"operations » LDX » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDX » run() ZERO_PAGE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LDX 0xa6. beforeExecute() returned undefined,","}"]}},{"number":93,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » execute() should return true","ok":true,"extra":{}},{"number":94,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » execute() should load Y","ok":true,"extra":{}},{"number":95,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » execute() should set N flag to 0","ok":true,"extra":{}},{"number":96,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » execute() should set N flag to 1","ok":true,"extra":{}},{"number":97,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":98,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":99,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » run() ABSOLUTE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Cannot read properties of undefined (reading \\toString\\),","}"],"at":["Operation.run","(node_modules/@ellieproject/ellie/src/ellie/processor/operation.js:83:84)","test/nellie/mos6502/operations/LDY.test.js:58:11"]}},{"number":100,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » run() ABSOLUTE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LDY 0xac. beforeExecute() returned undefined,","}"]}},{"number":101,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » run() IMMEDIATE mode should return this","ok":true,"extra":{}},{"number":102,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » run() IMMEDIATE mode should load Y from PC","ok":true,"extra":{}},{"number":103,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » run() ZERO_PAGE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Cannot read properties of undefined (reading \\toString\\),","}"],"at":["Operation.run","(node_modules/@ellieproject/ellie/src/ellie/processor/operation.js:83:84)","test/nellie/mos6502/operations/LDY.test.js:85:11"]}},{"number":104,"comment":"operations » LDY » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LDY » run() ZERO_PAGE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LDY 0xa4. beforeExecute() returned undefined,","}"]}},{"number":105,"comment":"operations » LSR » beforeEach hook for execute() should set C flag to 0","name":"operations » NOP » execute() should return true","ok":true,"extra":{}},{"number":106,"comment":"operations » LSR » beforeEach hook for execute() should set C flag to 0","name":"operations » NOP » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":107,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should return true","ok":true,"extra":{}},{"number":108,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should shift B right (no carry)","ok":true,"extra":{}},{"number":109,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should shift B right (carry)","ok":true,"extra":{}},{"number":110,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should set C flag to 0","ok":true,"extra":{}},{"number":111,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should set C flag to 1","ok":true,"extra":{}},{"number":112,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should set N flag to 0","ok":true,"extra":{}},{"number":113,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should never set N flag to 1","ok":true,"extra":{}},{"number":114,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":115,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":116,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » run() ABSOLUTE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LSR 0x5e. beforeExecute() returned undefined,","}"]}},{"number":117,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » run() ABSOLUTE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LSR 0x4e. beforeExecute() returned undefined,","}"]}},{"number":118,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » run() ACCUMULATOR mode should return this","ok":true,"extra":{}},{"number":119,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » run() ZERO_PAGE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LSR 0x56. beforeExecute() returned undefined,","}"]}},{"number":120,"comment":"operations » LSR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » LSR » run() ZERO_PAGE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting LSR 0x46. beforeExecute() returned undefined,","}"]}},{"number":121,"comment":"operations » ORA » beforeEach hook for execute() should return true","name":"operations » ORA » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/ORA.test.js:13:5"]}},{"number":122,"comment":"operations » PLA » beforeEach hook for execute() should return true","name":"operations » PHA » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/PHA.test.js:13:5"]}},{"number":123,"comment":"operations » PHP » beforeEach hook for execute() should return true","name":"operations » PLA » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/PLA.test.js:13:5"]}},{"number":124,"comment":"operations » PHP » beforeEach hook for execute() should return true","name":"operations » PHP » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/PHP.test.js:13:5"]}},{"number":125,"comment":"operations » PLP » beforeEach hook for execute() should return true","name":"operations » PLP » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/PLP.test.js:13:5"]}},{"number":126,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should return true","ok":true,"extra":{}},{"number":127,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should rotate B left (no carry)","ok":true,"extra":{}},{"number":128,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should rotate B left (carry)","ok":true,"extra":{}},{"number":129,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should set C flag to 0","ok":true,"extra":{}},{"number":130,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should set C flag to 1","ok":true,"extra":{}},{"number":131,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should set N flag to 0","ok":true,"extra":{}},{"number":132,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should set N flag to 1","ok":true,"extra":{}},{"number":133,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":134,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":135,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » run() ABSOLUTE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROL 0x3e. beforeExecute() returned undefined,","}"]}},{"number":136,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » run() ABSOLUTE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROL 0x2e. beforeExecute() returned undefined,","}"]}},{"number":137,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » run() ACCUMULATOR mode should return this","ok":true,"extra":{}},{"number":138,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » run() ZERO_PAGE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROL 0x36. beforeExecute() returned undefined,","}"]}},{"number":139,"comment":"operations » ROL » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROL » run() ZERO_PAGE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROL 0x26. beforeExecute() returned undefined,","}"]}},{"number":140,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should return true","ok":true,"extra":{}},{"number":141,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should rotate B right (no carry)","ok":true,"extra":{}},{"number":142,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should rotate B right (carry)","ok":true,"extra":{}},{"number":143,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should set C flag to 0","ok":true,"extra":{}},{"number":144,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should set C flag to 1","ok":true,"extra":{}},{"number":145,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should set N flag to 0","ok":true,"extra":{}},{"number":146,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should set N flag to 1","ok":true,"extra":{}},{"number":147,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":148,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":149,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » run() ABSOLUTE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROR 0x7e. beforeExecute() returned undefined,","}"]}},{"number":150,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » run() ABSOLUTE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROR 0x6e. beforeExecute() returned undefined,","}"]}},{"number":151,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » run() ACCUMULATOR mode should return this","ok":true,"extra":{}},{"number":152,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » run() ZERO_PAGE_X mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROR 0x76. beforeExecute() returned undefined,","}"]}},{"number":153,"comment":"operations » ROR » beforeEach hook for run() ZERO_PAGE mode should return this","name":"operations » ROR » run() ZERO_PAGE mode should return this","ok":false,"extra":{"name":["AssertionError"],"message":["Halting ROR 0x66. beforeExecute() returned undefined,","}"]}},{"number":154,"comment":"operations » RTI » beforeEach hook for execute() should return true","name":"operations » RTI » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/RTI.test.js:13:5"]}},{"number":155,"comment":"operations » RTS » beforeEach hook for execute() should return true","name":"operations » RTS » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/RTS.test.js:13:5"]}},{"number":156,"comment":"operations » SED » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SED » execute() should return true","ok":true,"extra":{}},{"number":157,"comment":"operations » SED » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SED » execute() should set D flag to 1","ok":true,"extra":{}},{"number":158,"comment":"operations » SED » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SED » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":159,"comment":"operations » SEC » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SEC » execute() should return true","ok":true,"extra":{}},{"number":160,"comment":"operations » SEC » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SEC » execute() should set C flag to 1","ok":true,"extra":{}},{"number":161,"comment":"operations » SEC » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SEC » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":162,"comment":"operations » SBC » beforeEach hook for execute() should return true","name":"operations » SBC » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/SBC.test.js:13:5"]}},{"number":163,"comment":"operations » SEI » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SEI » execute() should return true","ok":true,"extra":{}},{"number":164,"comment":"operations » SEI » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SEI » execute() should set I flag to 1","ok":true,"extra":{}},{"number":165,"comment":"operations » SEI » beforeEach hook for run() IMPLIED mode should return this","name":"operations » SEI » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":166,"comment":"operations » STA » beforeEach hook for execute() should return true","name":"operations » STA » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/STA.test.js:13:5"]}},{"number":167,"comment":"operations » STX » beforeEach hook for execute() should return true","name":"operations » STY » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/STY.test.js:13:5"]}},{"number":168,"comment":"operations » STX » beforeEach hook for execute() should return true","name":"operations » STX » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/STX.test.js:13:5"]}},{"number":169,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » execute() should return true","ok":true,"extra":{}},{"number":170,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » execute() should set X from A","ok":true,"extra":{}},{"number":171,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » execute() should set N flag to 0","ok":true,"extra":{}},{"number":172,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » execute() should set N flag to 1","ok":true,"extra":{}},{"number":173,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":174,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":175,"comment":"operations » TAX » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAX » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":176,"comment":"operations » TSX » beforeEach hook for execute() should return true","name":"operations » TSX » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/TSX.test.js:13:5"]}},{"number":177,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » execute() should return true","ok":true,"extra":{}},{"number":178,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » execute() should set Y from A","ok":true,"extra":{}},{"number":179,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » execute() should set N flag to 0","ok":true,"extra":{}},{"number":180,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » execute() should set N flag to 1","ok":true,"extra":{}},{"number":181,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":182,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":183,"comment":"operations » TAY » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TAY » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":184,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » execute() should return true","ok":true,"extra":{}},{"number":185,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » execute() should set A from X","ok":true,"extra":{}},{"number":186,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » execute() should set N flag to 0","ok":true,"extra":{}},{"number":187,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » execute() should set N flag to 1","ok":true,"extra":{}},{"number":188,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":189,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":190,"comment":"operations » TXA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TXA » run() IMPLIED mode should return this","ok":true,"extra":{}},{"number":191,"comment":"operations » TXS » beforeEach hook for execute() should return true","name":"operations » TXS » execute() should return true","ok":false,"extra":{"name":["AssertionError","assertion: is","values:","Difference:: |-","- false","+ true"],"at":["test/nellie/mos6502/operations/TXS.test.js:13:5"]}},{"number":192,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » execute() should return true","ok":true,"extra":{}},{"number":193,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » execute() should set A from Y","ok":true,"extra":{}},{"number":194,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » execute() should set N flag to 0","ok":true,"extra":{}},{"number":195,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » execute() should set N flag to 1","ok":true,"extra":{}},{"number":196,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » execute() should set Z flag to 0","ok":true,"extra":{}},{"number":197,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » execute() should set Z flag to 1","ok":true,"extra":{}},{"number":198,"comment":"operations » TYA » beforeEach hook for run() IMPLIED mode should return this","name":"operations » TYA » run() IMPLIED mode should return this","ok":true,"extra":{}}]}
